/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.34
 * Generated at: 2018-11-07 02:01:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class shareFile_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-16");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-16\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\t<!-- 添加一些基础样式文件 -->\r\n");
      out.write("\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"css/base.css\" />\r\n");
      out.write("\t<!-- 添加支持easyui的样式文件 -->\r\n");
      out.write("\t\t<link rel=\"stylesheet\" type=\"text/css\"\r\n");
      out.write("\t\t\t\thref=\"easyui/themes/default/easyui.css\">\r\n");
      out.write("\t<!-- 添加easyui的图标样式文件 -->\r\n");
      out.write("\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"easyui/themes/icon.css\">\r\n");
      out.write("\t\r\n");
      out.write("\t\t<script type=\"text/javascript\" src=\"easyui/jquery.min.js\"></script>\r\n");
      out.write("\t<!-- 添加用来支持easyui的jquery脚本 -->\r\n");
      out.write("\t\t<script type=\"text/javascript\" src=\"easyui/jquery.easyui.min.js\"></script>\r\n");
      out.write("\t<!-- 添加easyui的语言支持脚本 -->\r\n");
      out.write("\t\t<script type=\"text/javascript\" src=\"easyui/locale/easyui-lang-zh_CN.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t\r\n");
      out.write("\t<table title=\"Complex TreeGrid\" class=\"easyui-treegrid\" \r\n");
      out.write("\t\tstyle=\"width:550px;height:250px\"\turl=\"data/treegrid2_data.json\"\r\n");
      out.write("    \trownumbers=\"true\" showFooter=\"true\" idField=\"id\" treeField=\"region\">\r\n");
      out.write("    \t<thead frozen=\"true\">\r\n");
      out.write("    \t\t<tr>\r\n");
      out.write("    \t\t\t<th field=\"region\" width=\"150\">Region</th>\r\n");
      out.write("    \t\t</tr>\r\n");
      out.write("    \t</thead>\r\n");
      out.write("    \t<thead>\r\n");
      out.write("    \t\t<tr>\r\n");
      out.write("    \t\t\t<th colspan=\"4\">2009</th>\r\n");
      out.write("    \t\t\t<th colspan=\"4\">2010</th>\r\n");
      out.write("    \t\t</tr>\r\n");
      out.write("    \t\t<tr>\r\n");
      out.write("    \t\t\t<th field=\"f1\" width=\"50\" align=\"right\">1st qrt.</th>\r\n");
      out.write("    \t\t\t<th field=\"f2\" width=\"50\" align=\"right\">2st qrt.</th>\r\n");
      out.write("    \t\t\t<th field=\"f3\" width=\"50\" align=\"right\">3st qrt.</th>\r\n");
      out.write("    \t\t\t<th field=\"f4\" width=\"50\" align=\"right\">4st qrt.</th>\r\n");
      out.write("    \t\t\t<th field=\"f5\" width=\"50\" align=\"right\">1st qrt.</th>\r\n");
      out.write("    \t\t\t<th field=\"f6\" width=\"50\" align=\"right\">2st qrt.</th>\r\n");
      out.write("    \t\t\t<th field=\"f7\" width=\"50\" align=\"right\">3st qrt.</th>\r\n");
      out.write("    \t\t\t<th field=\"f8\" width=\"50\" align=\"right\">4st qrt.</th>\r\n");
      out.write("    \t\t</tr>\r\n");
      out.write("    \t</thead>\r\n");
      out.write("    </table>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\t<table id=\"shared_t\"></table>\r\n");
      out.write("\t\t<!-- 用ajax请求json数据 -->\r\n");
      out.write("\t\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t\t$(function(){\r\n");
      out.write("\t\t\t\t$(\"#shared_t\").datagrid({\r\n");
      out.write("\t\t\t\t\twidth:1110,\r\n");
      out.write("\t\t\t\t\theight:350,\r\n");
      out.write("\t\t\t\t\trownumber:true,\r\n");
      out.write("\t\t\t\t\tremoteSort:false,\r\n");
      out.write("\t\t\t\t\tnowrap:false,\r\n");
      out.write("\t\t\t\t\tfitColumns:true,\r\n");
      out.write("\t\t\t\t\tsingleSelect:true,\r\n");
      out.write("\t\t\t\t\tpagination:true,\r\n");
      out.write("\t\t\t\t\turl:'sharedFile.do',\r\n");
      out.write("\t\t\t\t\tmethod:'get',\r\n");
      out.write("\t\t\t\t\tcolumns:[[{\r\n");
      out.write("\t\t\t\t\t\tfield:'sid',\r\n");
      out.write("\t\t\t\t\t\ttitle:'编号',\r\n");
      out.write("\t\t\t\t\t\twidth:10,\r\n");
      out.write("\t\t\t\t\t\tsortable:true\r\n");
      out.write("\t\t\t\t\t},{\r\n");
      out.write("\t\t\t\t\t\tfield:'fileName',\r\n");
      out.write("\t\t\t\t\t\ttitle:'文件名',\r\n");
      out.write("\t\t\t\t\t\twidth:30,\r\n");
      out.write("\t\t\t\t\t\talign:'center',\r\n");
      out.write("\t\t\t\t\t\tsortable:true\r\n");
      out.write("\t\t\t\t\t},{\r\n");
      out.write("\t\t\t\t\t\tfield:'filePath',\r\n");
      out.write("\t\t\t\t\t\ttitle:'文件路径',\r\n");
      out.write("\t\t\t\t\t\twidth:30,\r\n");
      out.write("\t\t\t\t\t\talign:'center',\r\n");
      out.write("\t\t\t\t\t\tsortable:true\r\n");
      out.write("\t\t\t\t\t},{\r\n");
      out.write("\t\t\t\t\t\tfield:'fileType',\r\n");
      out.write("\t\t\t\t\t\ttitle:'文件类型',\r\n");
      out.write("\t\t\t\t\t\twidth:30,\r\n");
      out.write("\t\t\t\t\t\talign:'center',\r\n");
      out.write("\t\t\t\t\t\tsortable:true\r\n");
      out.write("\t\t\t\t\t},{\r\n");
      out.write("\t\t\t\t\t\tfield:'loginName',\r\n");
      out.write("\t\t\t\t\t\ttitle:'登录名',\r\n");
      out.write("\t\t\t\t\t\twidth:30,\r\n");
      out.write("\t\t\t\t\t\talign:'center',\r\n");
      out.write("\t\t\t\t\t\tsortable:true\r\n");
      out.write("\t\t\t\t\t},{\r\n");
      out.write("\t\t\t\t\t\tfield:'sharedTime',\r\n");
      out.write("\t\t\t\t\t\ttitle:'共享截止日期',\r\n");
      out.write("\t\t\t\t\t\twidth:30,\r\n");
      out.write("\t\t\t\t\t\talign:'center',\r\n");
      out.write("\t\t\t\t\t\tsortable:true\r\n");
      out.write("\t\t\t\t\t},{\r\n");
      out.write("\t\t\t\t\t\tfield:'sCreateTime',\r\n");
      out.write("\t\t\t\t\t\ttitle:'开始分享日期',\r\n");
      out.write("\t\t\t\t\t\twidth:30,\r\n");
      out.write("\t\t\t\t\t\talign:'center',\r\n");
      out.write("\t\t\t\t\t\tsortable:true\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t]],\r\n");
      out.write("\t\t\t\t\tgroupField : 'sid',\r\n");
      out.write("\t\t\t\t\tgroupFormatter : function(value, rows) {\r\n");
      out.write("\t\t\t\t\t\treturn value + ' - ' + rows.length\r\n");
      out.write("\t\t\t\t\t\t\t\t+ ' Item(s)';\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tvar pager = $('#shared_t').datagrid().datagrid('getPager'); // 添加分页\r\n");
      out.write("\t\t\t\tpager.pagination();\r\n");
      out.write("\t\t\t\tvar ids=[];\r\n");
      out.write("\t\t\t\tvar rows=$('#shared_t').datagrid('getSelections');\r\n");
      out.write("\t\t\t\tfor(var i=0;i<rows.length;i++){\r\n");
      out.write("\t\t\t\t\tids.push(rows[i].itemid);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\talert(ids.join(''));\r\n");
      out.write("\t\t\t})\r\n");
      out.write("\t\t</script>\r\n");
      out.write("\t\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
